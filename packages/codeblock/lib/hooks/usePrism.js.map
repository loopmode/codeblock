{"version":3,"sources":["../../src/hooks/usePrism.js"],"names":["usePrism","ref","options","React","useEffect","current","console","log","error","warn","Object","values"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;AAoBe,SAASA,QAAT,CAAkBC,GAAlB,EAAuBC,OAAvB,EAAgC;AAC3CC,iBAAMC,SAAN,CAAgB,YAAM;AAClB,QAAI;AACA,UAAIH,GAAG,CAACI,OAAR,EAAiB;AACbC,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB;AAAEN,UAAAA,GAAG,EAAHA,GAAF;AAAOC,UAAAA,OAAO,EAAPA;AAAP,SAAxB;AACA,iCAAWD,GAAG,CAACI,OAAf,EAAwBH,OAAxB;AACH;AACJ,KALD,CAKE,OAAOM,KAAP,EAAc;AACZF,MAAAA,OAAO,CAACG,IAAR,CAAa,6BAAb,EAA4C;AAAED,QAAAA,KAAK,EAALA;AAAF,OAA5C;AACH;AACJ,GATD,GASIP,GAAG,CAACI,OATR,4BASoBK,MAAM,CAACC,MAAP,CAAcT,OAAd,CATpB;AAUH","sourcesContent":["import React from 'react';\nimport applyPrism from '../utils/applyPrism';\n\n/**\n * Highlights code in the target element using prismjs.\n * Loads prismjs itself, the specified theme and the specified or auto-detected languages.\n *\n * If the element is not the actual target but a container of possible targets (e.g. you render a markdown file, that may contain any codeblocks),\n * use the `{isContainer: true}` option to automatically detect languages and run  `Prism.highlightAllUnder` instead of `Prism.highlightElement`.\n *\n * If you need to display large amounts of code, set the `{async: true}` option to use a worker for parsing.\n *\n * Check out the [prism documentation](https://prismjs.com/extending.html#api) for more details on the `async` and `callback` options.\n *\n * @param {Object} element The target DOM element\n * @param {Object} options the options object\n * @param {String} [options.language] name of the prism language to load\n * @param {String} [options.theme] name of the prism theme to load\n * @param {Boolean} [options.isContainer] whether `element` is a container of targets\n * @param {Boolean} [options.async] whether to use a web worker for parsing\n * @param {Function} [options.callback] Optional invoked after the highlighting is done\n *\n */\nexport default function usePrism(ref, options) {\n    React.useEffect(() => {\n        try {\n            if (ref.current) {\n                console.log('usePrism', { ref, options });\n                applyPrism(ref.current, options);\n            }\n        } catch (error) {\n            console.warn('[codeblock] usePrism failed', { error });\n        }\n    }, [ref.current, ...Object.values(options)]);\n}\n"],"file":"usePrism.js"}