{"version":3,"sources":["../../src/hooks/usePrism.js"],"names":["importPrism","usePrism","ref","options","React","useEffect","current","applyPrism","error","console","warn","Object","values","element","language","theme","isContainer","async","callback","stillMounted","Prism","detected","lang","highlightAllUnder","highlightElement"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;AAEA,IAAMA,WAAW,GAAG,SAAdA,WAAc;AAAA,SAChB;AAAO;AAA4C,WAAnD,CADgB;AAAA,CAApB;AAGA;;;;;;;;;;;;;;AAYe,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,OAAvB,EAAgC;AAC3CC,iBAAMC,SAAN,CAAgB,YAAM;AAClB,QAAI;AACA,UAAIH,GAAG,CAACI,OAAR,EAAiB;AACbC,QAAAA,UAAU,CAACL,GAAG,CAACI,OAAL,EAAcH,OAAd,CAAV;AACH;AACJ,KAJD,CAIE,OAAOK,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,IAAR,CAAa,6BAAb,EAA4C;AAAEF,QAAAA,KAAK,EAALA;AAAF,OAA5C;AACH;AACJ,GARD,GAQIN,GAAG,CAACI,OARR,4BAQoBK,MAAM,CAACC,MAAP,CAAcT,OAAd,CARpB;AASH;AAED;;;;;;;;;;;;;SAWsBI,U;;;;;;;0BAAf,iBAA0BM,OAA1B,EAAmCV,OAAnC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACH;AACQW,YAAAA,QAFL,GAEuDX,OAFvD,CAEKW,QAFL,EAEeC,KAFf,GAEuDZ,OAFvD,CAEeY,KAFf,EAEsBC,WAFtB,GAEuDb,OAFvD,CAEsBa,WAFtB,EAEmCC,KAFnC,GAEuDd,OAFvD,CAEmCc,KAFnC,EAE0CC,QAF1C,GAEuDf,OAFvD,CAE0Ce,QAF1C;;AAIGC,YAAAA,YAJH,GAIkB,SAAfA,YAAe;AAAA,qBAAM,CAAC,CAACN,OAAR;AAAA,aAJlB;;AAAA;AAAA,mBAMiBb,WAAW,EAN5B;;AAAA;AAMGoB,YAAAA,KANH;;AAAA,kBAQCJ,WAAW,IAAIG,YAAY,EAR5B;AAAA;AAAA;AAAA;;AASOE,YAAAA,QATP,GASkB,2BAAaR,OAAb,CATlB;AAAA;AAAA;AAAA;AAAA;AAAA,wBAWcQ,QAXd;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWMC,YAAAA,IAXN;;AAAA,kBAYSA,IAAI,IAAIH,YAAY,EAZ7B;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAae,yBAAW,UAAX,EAAuBG,IAAvB,CAbf;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBAgBQR,QAAQ,IAAIK,YAAY,EAhBhC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAiBO,yBAAW,UAAX,EAAuBL,QAAvB,CAjBP;;AAAA;AAAA,kBAoBCC,KAAK,IAAII,YAAY,EApBtB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAqBO,yBAAW,OAAX,EAAoBJ,KAApB,CArBP;;AAAA;AAwBH,gBAAII,YAAY,EAAhB,EAAoB;AAChBH,cAAAA,WAAW,GACLI,KAAK,CAACG,iBAAN,CAAwBV,OAAxB,EAAiCI,KAAjC,EAAwCC,QAAxC,CADK,GAELE,KAAK,CAACI,gBAAN,CAAuBX,OAAvB,EAAgCI,KAAhC,EAAuCC,QAAvC,CAFN;AAGH;;AA5BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import React from 'react';\nimport loadModule from '../utils/loadModule';\nimport getLanguages from '../utils/getLanguages';\n\nconst importPrism = () =>\n    import(/* webpackChunkName: 'codeblock/prismjs' */ 'prismjs');\n\n/**\n * Highlights code in the target element using prismjs.\n * Loads prismjs itself, the specified theme and the specified or auto-detected languages.\n *\n * If the element is not the actual target but a container of possible targets (e.g. you render a markdown file, that may contain any codeblocks),\n * use the `{isContainer: true}` option to automatically detect languages and run  `Prism.highlightAllUnder` instead of `Prism.highlightElement`.\n *\n * If you need to display large amounts of code, set the `{async: true}` option to use a worker for parsing.\n *\n * Check out the [prism documentation](https://prismjs.com/extending.html#api) for more details on the `async` and `callback` options.\n *\n */\nexport default function usePrism(ref, options) {\n    React.useEffect(() => {\n        try {\n            if (ref.current) {\n                applyPrism(ref.current, options);\n            }\n        } catch (error) {\n            console.warn('[codeblock] usePrism failed', { error });\n        }\n    }, [ref.current, ...Object.values(options)]);\n}\n\n/**\n * Async function that loads and applies prism.\n *\n * @param {Object} element The target DOM element\n * @param {Object} options Options object\n * @param {String} [options.language] Name of the prism language to load\n * @param {String} [options.theme] Name of the prism theme to load\n * @param {Boolean} [options.isContainer] Whether to treat the element as a container\n * @param {Boolean} [options.async] Whether to use a web worker for parsing the code\n * @param {Function} [options.callback] Optional callback invoked after the highlighting is done\n */\nexport async function applyPrism(element, options) {\n    //\n    const { language, theme, isContainer, async, callback } = options;\n\n    const stillMounted = () => !!element;\n\n    const Prism = await importPrism();\n\n    if (isContainer && stillMounted()) {\n        const detected = getLanguages(element);\n        let lang;\n        for (lang of detected) {\n            if (lang && stillMounted()) {\n                await loadModule('language', lang);\n            }\n        }\n    } else if (language && stillMounted()) {\n        await loadModule('language', language);\n    }\n\n    if (theme && stillMounted()) {\n        await loadModule('theme', theme);\n    }\n\n    if (stillMounted()) {\n        isContainer\n            ? Prism.highlightAllUnder(element, async, callback)\n            : Prism.highlightElement(element, async, callback);\n    }\n}\n"],"file":"usePrism.js"}