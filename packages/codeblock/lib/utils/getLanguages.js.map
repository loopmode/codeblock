{"version":3,"sources":["../../src/utils/getLanguages.js"],"names":["childSelector","languageMatcher","supportedLanguages","Object","keys","languages","getLanguages","element","elements","querySelectorAll","console","debug","reduce","result","el","matches","className","match","language","includes","push"],"mappings":";;;;;;;AAGA;;;;;;;;;;;;AAHA,IAAMA,aAAa,GAAG,wCAAtB;AACA,IAAMC,eAAe,GAAG,2BAAxB;AAIA,IAAMC,kBAAkB,GAAGC,MAAM,CAACC,IAAP,CAAYC,kBAAZ,CAA3B;AAEA;;;;;;;;;;AASe,SAASC,YAAT,CAAsBC,OAAtB,EAA+B;AAC1C,MAAI,CAACA,OAAL,EAAc;AACV,WAAO,EAAP;AACH;;AACD,MAAMC,QAAQ,GAAGD,OAAO,CAACE,gBAAR,CAAyBT,aAAzB,CAAjB;AAEAU,EAAAA,OAAO,CAACC,KAAR,CAAc,cAAd,EAA8B;AAAEJ,IAAAA,OAAO,EAAPA,OAAF;AAAWC,IAAAA,QAAQ,EAARA;AAAX,GAA9B;AAEA,SAAO,mBAAIA,QAAJ,EAAcI,MAAd,CAAqB,UAACC,MAAD,EAASC,EAAT,EAAgB;AACxC,QAAMC,OAAO,GAAGD,EAAE,CAACE,SAAH,CAAaC,KAAb,CAAmBhB,eAAnB,CAAhB;AACA,QAAMiB,QAAQ,GAAGH,OAAO,IAAIA,OAAO,CAAC,CAAD,CAAnC;;AACA,QACIb,kBAAkB,CAACiB,QAAnB,CAA4BD,QAA5B,KACA,CAACL,MAAM,CAACM,QAAP,CAAgBD,QAAhB,CAFL,EAGE;AACER,MAAAA,OAAO,CAACC,KAAR,CAAc,2BAAd,EAA2CO,QAA3C;AAEAL,MAAAA,MAAM,CAACO,IAAP,CAAYF,QAAZ;AACH;;AACD,WAAOL,MAAP;AACH,GAZM,EAYJ,EAZI,CAAP;AAaH","sourcesContent":["const childSelector = '[class*=\"language-\"], [class*=\"lang-\"]';\nconst languageMatcher = /lang(uage)*-([a-z0-9\\-]*)/;\n\nimport languages from '../languages';\n\nconst supportedLanguages = Object.keys(languages);\n\n/**\n * Detects prism languages found as CSS classes on the children of a given element.\n *\n * Queries all child elements that have a `language-*` CSS class and returns\n * an array of the unique language names (the `*` values) that were found.\n *\n * @param {Element} element a DOM element\n * @return {Array} an array of languages found inside `element`\n */\nexport default function getLanguages(element) {\n    if (!element) {\n        return [];\n    }\n    const elements = element.querySelectorAll(childSelector);\n\n    console.debug('getLanguages', { element, elements });\n\n    return [...elements].reduce((result, el) => {\n        const matches = el.className.match(languageMatcher);\n        const language = matches && matches[2];\n        if (\n            supportedLanguages.includes(language) &&\n            !result.includes(language)\n        ) {\n            console.debug('getLanguages >> detected:', language);\n\n            result.push(language);\n        }\n        return result;\n    }, []);\n}\n"],"file":"getLanguages.js"}